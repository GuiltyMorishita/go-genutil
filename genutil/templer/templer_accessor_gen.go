// Code generated by go-genaccessor; DO NOT EDIT.

package templer

func (m Package) Name() string {
	return m.name
}

func (m Package) Path() string {
	return m.path
}

func (m Param) Name() string {
	return m.name
}

func (m Param) Type() Type {
	return m.typ
}

func (m Field) IsEmbed() bool {
	return m.isEmbed
}

func (m *Field) SetIsEmbed(s bool) {
	m.isEmbed = s
}

func (m Arg) IsVariadic() bool {
	return m.isVariadic
}

func (m *Arg) SetIsVariadic(s bool) {
	m.isVariadic = s
}

func (m Method) Args() []Arg {
	return m.args
}

func (m Method) Responses() []Param {
	return m.responses
}

func (m RootParam) Types() []Type {
	return m.types
}

func (m PrimitiveType) TypeKind() TypeKind {
	return m.typeKind
}

func (m PrimitiveType) TypeName() string {
	return m.typeName
}

func (m PrimitiveType) IsPointer() bool {
	return m.isPointer
}

func (m *PrimitiveType) SetIsPointer(s bool) {
	m.isPointer = s
}

func (m StructType) TypeKind() TypeKind {
	return m.typeKind
}

func (m StructType) TypeName() string {
	return m.typeName
}

func (m StructType) Pkg() Package {
	return m.pkg
}

func (m StructType) Fields() []Field {
	return m.fields
}

func (m StructType) Methods() []Method {
	return m.methods
}

func (m StructType) IsPointer() bool {
	return m.isPointer
}

func (m *StructType) SetIsPointer(s bool) {
	m.isPointer = s
}

func (m SliceType) TypeKind() TypeKind {
	return m.typeKind
}

func (m SliceType) ItemType() Type {
	return m.itemType
}

func (m SliceType) IsPointer() bool {
	return m.isPointer
}

func (m *SliceType) SetIsPointer(s bool) {
	m.isPointer = s
}

func (m MapType) TypeKind() TypeKind {
	return m.typeKind
}

func (m MapType) KeyType() Type {
	return m.keyType
}

func (m MapType) ValueType() Type {
	return m.valueType
}

func (m MapType) IsPointer() bool {
	return m.isPointer
}

func (m *MapType) SetIsPointer(s bool) {
	m.isPointer = s
}

func (m ChannelType) TypeKind() TypeKind {
	return m.typeKind
}

func (m ChannelType) ItemType() Type {
	return m.itemType
}

func (m ChannelType) IsPointer() bool {
	return m.isPointer
}

func (m *ChannelType) SetIsPointer(s bool) {
	m.isPointer = s
}

func (m ChannelType) Readonly() bool {
	return m.readonly
}

func (m *ChannelType) SetReadonly(s bool) {
	m.readonly = s
}

func (m ChannelType) Writeonly() bool {
	return m.writeonly
}

func (m *ChannelType) SetWriteonly(s bool) {
	m.writeonly = s
}
